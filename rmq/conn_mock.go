// Code generated by MockGen. DO NOT EDIT.
// Source: conn_repo.go
//
// Generated by this command:
//
//	mockgen -source=conn_repo.go -package=rmq -destination=conn_mock.go
//

// Package rmq is a generated GoMock package.
package rmq

import (
	tls "crypto/tls"
	net "net"
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectionRepo is a mock of ConnectionRepo interface.
type MockConnectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionRepoMockRecorder
}

// MockConnectionRepoMockRecorder is the mock recorder for MockConnectionRepo.
type MockConnectionRepoMockRecorder struct {
	mock *MockConnectionRepo
}

// NewMockConnectionRepo creates a new mock instance.
func NewMockConnectionRepo(ctrl *gomock.Controller) *MockConnectionRepo {
	mock := &MockConnectionRepo{ctrl: ctrl}
	mock.recorder = &MockConnectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionRepo) EXPECT() *MockConnectionRepoMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockConnectionRepo) Channel() (*amqp091.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(*amqp091.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockConnectionRepoMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockConnectionRepo)(nil).Channel))
}

// Close mocks base method.
func (m *MockConnectionRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectionRepo)(nil).Close))
}

// ConnectionState mocks base method.
func (m *MockConnectionRepo) ConnectionState() tls.ConnectionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionState")
	ret0, _ := ret[0].(tls.ConnectionState)
	return ret0
}

// ConnectionState indicates an expected call of ConnectionState.
func (mr *MockConnectionRepoMockRecorder) ConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionState", reflect.TypeOf((*MockConnectionRepo)(nil).ConnectionState))
}

// IsClosed mocks base method.
func (m *MockConnectionRepo) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnectionRepoMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConnectionRepo)(nil).IsClosed))
}

// LocalAddr mocks base method.
func (m *MockConnectionRepo) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnectionRepoMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConnectionRepo)(nil).LocalAddr))
}

// NotifyBlocked mocks base method.
func (m *MockConnectionRepo) NotifyBlocked(receiver chan amqp091.Blocking) chan amqp091.Blocking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyBlocked", receiver)
	ret0, _ := ret[0].(chan amqp091.Blocking)
	return ret0
}

// NotifyBlocked indicates an expected call of NotifyBlocked.
func (mr *MockConnectionRepoMockRecorder) NotifyBlocked(receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyBlocked", reflect.TypeOf((*MockConnectionRepo)(nil).NotifyBlocked), receiver)
}

// NotifyClose mocks base method.
func (m *MockConnectionRepo) NotifyClose(receiver chan *amqp091.Error) chan *amqp091.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClose", receiver)
	ret0, _ := ret[0].(chan *amqp091.Error)
	return ret0
}

// NotifyClose indicates an expected call of NotifyClose.
func (mr *MockConnectionRepoMockRecorder) NotifyClose(receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClose", reflect.TypeOf((*MockConnectionRepo)(nil).NotifyClose), receiver)
}
